#worker_processes  auto;
#dinamik imaj modülü yüklemek için bu kodu ekliyoruz
load_module /etc/nginx/modules/ngx_http_image_filter_module.so;


events {
     worker_connections  1024;
}


http {
    include  mime.types;
   
     # Configure microcache (fastcgi)
    fastcgi_cache_path /tmp/nginx_cache levels=1:2 keys_zone=ZONE_1:100m inactive=60m;
    fastcgi_cache_key "$scheme$request_method$host$request_uri";
    add_header X-Cache $upstream_cache_status;
    
    gzip on;
    #sıkıştırma oranı 
    gzip_comp_level 3;
    gzip_types text/css;
    gzip_types text/javascript;
   
   
    #Buffer gelen tcp isteğindeki datayı ram'e ram yetmediğinde diske yazar
    #Bu yazma işlemi ile ilgili ayarlar aşağıda ram/disk yazma şekli 10kilobyte olarak yaz
    #diyoruz bunu daha da arttırabiliriz diğer ayarda gönderilen post 8 megabyte geçmesin diyoruz
    # Buffer size for POST submissions
    client_body_buffer_size 10K;
    client_max_body_size 8m;
    #header size ayarlıyoruz
    # Buffer size for Headers
    client_header_buffer_size 1k;
    #bağlantı durumunu kontrol edilmesi
    # Max time to receive client headers/body
    client_body_timeout 12;
    client_header_timeout 12;
    # açık bağlantıyı ne kadar sürdüreyim
    # Max time to keep a connection open for
    keepalive_timeout 15;
   
    # Max time for the client accept/receive a response
    send_timeout 10;
    
    # Skip buffering for static files
    sendfile on;

    # Optimise sendfile packets
    tcp_nopush on;

    server {
        listen 80;
        listen 443 ssl http2;
        server_name 127.0.1.1 localhost;

        root /sites/demo;

        ssl_certificate /etc/nginx/ssl/self.crt;
        ssl_certificate_key /etc/nginx/ssl/self.key;
 
        # Cache by default (Aslında default cache değeri atıyoruz)
        set $no_cache 0;
        #Eğer cachelemesini istemiyorsak değeri 1 gönderiyoruz bu değişkeni fastcgi alanında kullanıyoruz
        # Check for cache bypass
        if ($arg_skipcache = 1) {
            set $no_cache 1;
        }

        set $weekend 'No';

        #check if weekend  not equal operator tilda
        if ( $date_local ~ 'Saturday|Sunday') {
            set $weekend 'Yes';
        }

        location /is_weekend {
            return 200 $weekend;
        }
        #yönlendirme
        location /logo {
            return 307 /thumb.png;
        }
        #server push
        location = /index.html {
             http2_push /style.css;
             http2_push /thumb.png;
        }

        #try_files $uri /friendly404;

        #location /friendly404 {
        #    return 404 "that is reason why you are here";
        #}

        #rewrite more consume resources than redirect
        rewrite ^/user/\w+ /greet;
        location /greet {
            return 200 "selamlar gençler";
        }
       #rewrite again with capture group and handle as $1
        rewrite ^/member/(\w+) /test/$1;

        location = /test/john {
            return 200  "Hello john";
        }
        #check static API key
        #if ( $arg_apikey != 1234 ) {
        #    return 401 "Incorrect API key";
        #}
        #variables kullanımına örnek
        #location = /inspect {
           #return 200 "$host\n$uri\n$args";     
           #return 200 "Name: $arg_name";     
        #}  

        #prefix match herhangi bir kelime greet ile başlıyorsa bu adres cevap vermeye devam edecektir
        #location /greet {
        #    return 200 'Hello from nginx "/greet" location !';
        #}

        #exact match herhangi bir kelime greet ile başlıyorsa bu adres cevap vermeye devam edecektir
        #location = /greet {
        #    return 200 'Hello from nginx "/greet" location Exact Match !';
        #}
        
        #regex match tilda character case sensitive if you upper any character then 404 will return
        #location ~ /greet[0-9] {
        #    return 200 'Hello from nginx "/greet" location Regex Match !';
        #}

        #Preferential Prefix Match 
        location ^~ /Greet2 {
            return 200 'Hello from nginx "/greet" location preferential Match !';
        }

        #regex match insensitive shoul use * character 
        location ~* /greet[0-9] {
            return 200 'Hello from nginx "/greet" location insensitive Match !';
        }
        
        location = /thumb.png {
            #imaj modülü için attributeler
            image_filter rotate 180; 
        }

        location ~* \.(css|js|jpg|png)$ {
	        access_log off;
	        add_header Cache-Control public;
	        add_header Pragma public;
	        add_header Vary Accept-Encoding;
	        expires 1M;
        }

        location ~\.php$ {
            

                # Enable cache
                fastcgi_cache ZONE_1;
                fastcgi_cache_valid 200 60m;
                #cachelemesin değişkeni burada tutuluyor
                fastcgi_cache_bypass $no_cache;
                fastcgi_no_cache $no_cache;
        }

    }

}
